@use 'sass:math';
@use '@angular/cdk';
@use '@angular/material/core/style/variables';


$name-prefix: 'lib-virtual-select-field';

:root {
  --#{$name-prefix}-trigger-text-color: inherit;
  --#{$name-prefix}-trigger-text-color--disabled: var(
    --#{$name-prefix}-trigger-color
  );
  --#{$name-prefix}-trigger-font-family: inherit;
  --#{$name-prefix}-trigger-line-height: inherit;
  --#{$name-prefix}-trigger-font-size: inherit;
  --#{$name-prefix}-trigger-font-weight: inherit;
  --#{$name-prefix}-trigger-letter-spacing: inherit;

  --#{$name-prefix}-placeholder-text-color: inherit;
  --#{$name-prefix}-placeholder-transition: color
    variables.$swift-ease-out-duration
    math.div(variables.$swift-ease-out-duration, 3)
    variables.$swift-ease-out-timing-function;

  --#{$name-prefix}-arrow-size: 5px;
  --#{$name-prefix}-arrow-color--enabled: inherit;
  --#{$name-prefix}-arrow-color--focused: inherit;
  --#{$name-prefix}-arrow-color--invalid: inherit;
  --#{$name-prefix}-arrow-color--disabled: inherit;
}

:host {
  color: var(--#{$name-prefix}-trigger-text-color);
  font-family: var(--#{$name-prefix}-trigger-font-family);
  line-height: var(--#{$name-prefix}-trigger-line-height);
  font-size: var(--#{$name-prefix}-trigger-font-size);
  font-weight: var(--#{$name-prefix}-trigger-font-weight);
  letter-spacing: var(--#{$name-prefix}-trigger-letter-spacing);

  outline: none;
}

.#{$name-prefix}-trigger {
  display: inline-flex;
  align-items: center;
  cursor: pointer;
  position: relative;
  box-sizing: border-box;
  width: 100%;

  .#{$name-prefix}-disabled & {
    cursor: default;
    color: var(--#{$name-prefix}-trigger-text-color--disabled);
  }
}

.#{$name-prefix}-value {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  width: 100%;
}

.#{$name-prefix}-placeholder {
  // Delay the transition until the label has animated about a third of the way through, in
  // order to prevent the placeholder from overlapping for a split second.
  transition: var(--#{$name-prefix}-placeholder-transition);
  color: var(--#{$name-prefix}-placeholder-text-color);

  ._mat-animation-noopable & {
    transition: none;
  }

  :host-context(.#{$name-prefix}-hide-placeholder) & {
    color: transparent;

    // Overwrite browser specific CSS properties that can overwrite the `color` property.
    // Some developers seem to use this approach to easily overwrite the placeholder / label color.
    -webkit-text-fill-color: transparent;

    // Remove the transition to prevent the placeholder
    // from overlapping when the label comes back down.
    transition: none;
    // Prevents the '...' from showing on the parent element.
    display: block;
  }
}

.#{$name-prefix} {
  &-panel {
    --#{$name-prefix}-panel-visible-items: 8;
    --#{$name-prefix}-panel-background: black;
    --#{$name-prefix}-panel-box-shadow: none;
    --#{$name-prefix}-panel-option-height: 48px;

    width: 100%;
    height: calc(
      var(--#{$name-prefix}-panel-option-height) *
        var(--#{$name-prefix}-panel-visible-items)
    );
    background: var(--#{$name-prefix}-panel-background);
    box-shadow: var(--#{$name-prefix}-panel-box-shadow);

    @include cdk.high-contrast(active, off) {
      outline: solid 1px;
    }
  }

  &-list-wrapper {
    display: flex;
    flex-direction: column;
  }
}

.#{$name-prefix}-arrow-wrapper {
  height: 24px;
  flex-shrink: 0;
  display: inline-flex;
  align-items: center;

  :host-context(.mat-form-field-appearance-fill) & {
    transform: translateY(-8px);
  }
}

.#{$name-prefix}-arrow {
  width: calc(var(--#{$name-prefix}-arrow-size) * 2);
  height: var(--#{$name-prefix}-arrow-size);
  position: relative;

  color: var(--#{$name-prefix}-arrow-color--enabled);

  .mat-mdc-form-field.mat-focused & {
    color: var(--#{$name-prefix}-arrow-color--focused);
  }

  .mat-mdc-form-field .mat-mdc-select.mat-mdc-select-invalid & {
    color: var(--#{$name-prefix}-arrow-color--invalid);
  }

  .mat-mdc-form-field .mat-mdc-select.mat-mdc-select-disabled & {
    color: var(--#{$name-prefix}-arrow-color--disabled);
  }

  svg {
    fill: currentColor;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);

    @include cdk.high-contrast(active, off) {
      // On Chromium browsers the `currentColor` blends in with the
      // background for SVGs so we have to fall back to `CanvasText`.
      fill: CanvasText;

      .mat-mdc-select-disabled & {
        fill: GrayText;
      }
    }
  }
}
